/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DatastoreService_H
#define DatastoreService_H

#include <thrift/TDispatchProcessor.h>
#include "datastore_types.h"

namespace chorddb { namespace datastore {

class DatastoreServiceIf {
 public:
  virtual ~DatastoreServiceIf() {}
  virtual void put(const std::string& key, const std::string& value) = 0;
  virtual void get(std::string& _return, const std::string& key) = 0;
  virtual void remove(const std::string& key) = 0;
};

class DatastoreServiceIfFactory {
 public:
  typedef DatastoreServiceIf Handler;

  virtual ~DatastoreServiceIfFactory() {}

  virtual DatastoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DatastoreServiceIf* /* handler */) = 0;
};

class DatastoreServiceIfSingletonFactory : virtual public DatastoreServiceIfFactory {
 public:
  DatastoreServiceIfSingletonFactory(const boost::shared_ptr<DatastoreServiceIf>& iface) : iface_(iface) {}
  virtual ~DatastoreServiceIfSingletonFactory() {}

  virtual DatastoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DatastoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DatastoreServiceIf> iface_;
};

class DatastoreServiceNull : virtual public DatastoreServiceIf {
 public:
  virtual ~DatastoreServiceNull() {}
  void put(const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void get(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  void remove(const std::string& /* key */) {
    return;
  }
};

typedef struct _DatastoreService_put_args__isset {
  _DatastoreService_put_args__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _DatastoreService_put_args__isset;

class DatastoreService_put_args {
 public:

  DatastoreService_put_args() : key(), value() {
  }

  virtual ~DatastoreService_put_args() throw() {}

  std::string key;
  std::string value;

  _DatastoreService_put_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const DatastoreService_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DatastoreService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatastoreService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatastoreService_put_pargs {
 public:


  virtual ~DatastoreService_put_pargs() throw() {}

  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatastoreService_put_result {
 public:

  DatastoreService_put_result() {
  }

  virtual ~DatastoreService_put_result() throw() {}


  bool operator == (const DatastoreService_put_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DatastoreService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatastoreService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatastoreService_put_presult {
 public:


  virtual ~DatastoreService_put_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatastoreService_get_args__isset {
  _DatastoreService_get_args__isset() : key(false) {}
  bool key;
} _DatastoreService_get_args__isset;

class DatastoreService_get_args {
 public:

  DatastoreService_get_args() : key() {
  }

  virtual ~DatastoreService_get_args() throw() {}

  std::string key;

  _DatastoreService_get_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const DatastoreService_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const DatastoreService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatastoreService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatastoreService_get_pargs {
 public:


  virtual ~DatastoreService_get_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatastoreService_get_result__isset {
  _DatastoreService_get_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _DatastoreService_get_result__isset;

class DatastoreService_get_result {
 public:

  DatastoreService_get_result() : success() {
  }

  virtual ~DatastoreService_get_result() throw() {}

  std::string success;
  DataNotFoundException e;

  _DatastoreService_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_e(const DataNotFoundException& val) {
    e = val;
  }

  bool operator == (const DatastoreService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const DatastoreService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatastoreService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatastoreService_get_presult__isset {
  _DatastoreService_get_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _DatastoreService_get_presult__isset;

class DatastoreService_get_presult {
 public:


  virtual ~DatastoreService_get_presult() throw() {}

  std::string* success;
  DataNotFoundException e;

  _DatastoreService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatastoreService_remove_args__isset {
  _DatastoreService_remove_args__isset() : key(false) {}
  bool key;
} _DatastoreService_remove_args__isset;

class DatastoreService_remove_args {
 public:

  DatastoreService_remove_args() : key() {
  }

  virtual ~DatastoreService_remove_args() throw() {}

  std::string key;

  _DatastoreService_remove_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const DatastoreService_remove_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const DatastoreService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatastoreService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatastoreService_remove_pargs {
 public:


  virtual ~DatastoreService_remove_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatastoreService_remove_result {
 public:

  DatastoreService_remove_result() {
  }

  virtual ~DatastoreService_remove_result() throw() {}


  bool operator == (const DatastoreService_remove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DatastoreService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatastoreService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatastoreService_remove_presult {
 public:


  virtual ~DatastoreService_remove_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DatastoreServiceClient : virtual public DatastoreServiceIf {
 public:
  DatastoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DatastoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void put(const std::string& key, const std::string& value);
  void send_put(const std::string& key, const std::string& value);
  void recv_put();
  void get(std::string& _return, const std::string& key);
  void send_get(const std::string& key);
  void recv_get(std::string& _return);
  void remove(const std::string& key);
  void send_remove(const std::string& key);
  void recv_remove();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DatastoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DatastoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DatastoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DatastoreServiceProcessor(boost::shared_ptr<DatastoreServiceIf> iface) :
    iface_(iface) {
    processMap_["put"] = &DatastoreServiceProcessor::process_put;
    processMap_["get"] = &DatastoreServiceProcessor::process_get;
    processMap_["remove"] = &DatastoreServiceProcessor::process_remove;
  }

  virtual ~DatastoreServiceProcessor() {}
};

class DatastoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DatastoreServiceProcessorFactory(const ::boost::shared_ptr< DatastoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DatastoreServiceIfFactory > handlerFactory_;
};

class DatastoreServiceMultiface : virtual public DatastoreServiceIf {
 public:
  DatastoreServiceMultiface(std::vector<boost::shared_ptr<DatastoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DatastoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DatastoreServiceIf> > ifaces_;
  DatastoreServiceMultiface() {}
  void add(boost::shared_ptr<DatastoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void put(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(key, value);
    }
    ifaces_[i]->put(key, value);
  }

  void get(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

  void remove(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(key);
    }
    ifaces_[i]->remove(key);
  }

};

}} // namespace

#endif

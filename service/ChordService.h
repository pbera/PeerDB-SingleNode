/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChordService_H
#define ChordService_H

#include <thrift/TDispatchProcessor.h>
#include "chord_types.h"

namespace chorddb { namespace middleware {

class ChordServiceIf {
 public:
  virtual ~ChordServiceIf() {}
  virtual void putEntity(const Entity& entity) = 0;
  virtual void getEntity(Entity& _return, const Entity& entity) = 0;
  virtual void deleteEntity(const Entity& entity) = 0;
  virtual void ping(Node& _return) = 0;
  virtual void notify(Node& _return, const Node& newNode) = 0;
  virtual void getSuccessor(GetSuccessorResponse& _return, const int64_t id) = 0;
  virtual void getConfiguration(GetConfigurationResponse& _return) = 0;
  virtual void getFingerTable(std::vector<Node> & _return) = 0;
};

class ChordServiceIfFactory {
 public:
  typedef ChordServiceIf Handler;

  virtual ~ChordServiceIfFactory() {}

  virtual ChordServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChordServiceIf* /* handler */) = 0;
};

class ChordServiceIfSingletonFactory : virtual public ChordServiceIfFactory {
 public:
  ChordServiceIfSingletonFactory(const boost::shared_ptr<ChordServiceIf>& iface) : iface_(iface) {}
  virtual ~ChordServiceIfSingletonFactory() {}

  virtual ChordServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChordServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChordServiceIf> iface_;
};

class ChordServiceNull : virtual public ChordServiceIf {
 public:
  virtual ~ChordServiceNull() {}
  void putEntity(const Entity& /* entity */) {
    return;
  }
  void getEntity(Entity& /* _return */, const Entity& /* entity */) {
    return;
  }
  void deleteEntity(const Entity& /* entity */) {
    return;
  }
  void ping(Node& /* _return */) {
    return;
  }
  void notify(Node& /* _return */, const Node& /* newNode */) {
    return;
  }
  void getSuccessor(GetSuccessorResponse& /* _return */, const int64_t /* id */) {
    return;
  }
  void getConfiguration(GetConfigurationResponse& /* _return */) {
    return;
  }
  void getFingerTable(std::vector<Node> & /* _return */) {
    return;
  }
};

typedef struct _ChordService_putEntity_args__isset {
  _ChordService_putEntity_args__isset() : entity(false) {}
  bool entity;
} _ChordService_putEntity_args__isset;

class ChordService_putEntity_args {
 public:

  ChordService_putEntity_args() {
  }

  virtual ~ChordService_putEntity_args() throw() {}

  Entity entity;

  _ChordService_putEntity_args__isset __isset;

  void __set_entity(const Entity& val) {
    entity = val;
  }

  bool operator == (const ChordService_putEntity_args & rhs) const
  {
    if (!(entity == rhs.entity))
      return false;
    return true;
  }
  bool operator != (const ChordService_putEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_putEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChordService_putEntity_pargs {
 public:


  virtual ~ChordService_putEntity_pargs() throw() {}

  const Entity* entity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_putEntity_result__isset {
  _ChordService_putEntity_result__isset() : ce(false) {}
  bool ce;
} _ChordService_putEntity_result__isset;

class ChordService_putEntity_result {
 public:

  ChordService_putEntity_result() {
  }

  virtual ~ChordService_putEntity_result() throw() {}

  ChordException ce;

  _ChordService_putEntity_result__isset __isset;

  void __set_ce(const ChordException& val) {
    ce = val;
  }

  bool operator == (const ChordService_putEntity_result & rhs) const
  {
    if (!(ce == rhs.ce))
      return false;
    return true;
  }
  bool operator != (const ChordService_putEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_putEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_putEntity_presult__isset {
  _ChordService_putEntity_presult__isset() : ce(false) {}
  bool ce;
} _ChordService_putEntity_presult__isset;

class ChordService_putEntity_presult {
 public:


  virtual ~ChordService_putEntity_presult() throw() {}

  ChordException ce;

  _ChordService_putEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChordService_getEntity_args__isset {
  _ChordService_getEntity_args__isset() : entity(false) {}
  bool entity;
} _ChordService_getEntity_args__isset;

class ChordService_getEntity_args {
 public:

  ChordService_getEntity_args() {
  }

  virtual ~ChordService_getEntity_args() throw() {}

  Entity entity;

  _ChordService_getEntity_args__isset __isset;

  void __set_entity(const Entity& val) {
    entity = val;
  }

  bool operator == (const ChordService_getEntity_args & rhs) const
  {
    if (!(entity == rhs.entity))
      return false;
    return true;
  }
  bool operator != (const ChordService_getEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_getEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChordService_getEntity_pargs {
 public:


  virtual ~ChordService_getEntity_pargs() throw() {}

  const Entity* entity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_getEntity_result__isset {
  _ChordService_getEntity_result__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_getEntity_result__isset;

class ChordService_getEntity_result {
 public:

  ChordService_getEntity_result() {
  }

  virtual ~ChordService_getEntity_result() throw() {}

  Entity success;
  ChordException ce;

  _ChordService_getEntity_result__isset __isset;

  void __set_success(const Entity& val) {
    success = val;
  }

  void __set_ce(const ChordException& val) {
    ce = val;
  }

  bool operator == (const ChordService_getEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ce == rhs.ce))
      return false;
    return true;
  }
  bool operator != (const ChordService_getEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_getEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_getEntity_presult__isset {
  _ChordService_getEntity_presult__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_getEntity_presult__isset;

class ChordService_getEntity_presult {
 public:


  virtual ~ChordService_getEntity_presult() throw() {}

  Entity* success;
  ChordException ce;

  _ChordService_getEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChordService_deleteEntity_args__isset {
  _ChordService_deleteEntity_args__isset() : entity(false) {}
  bool entity;
} _ChordService_deleteEntity_args__isset;

class ChordService_deleteEntity_args {
 public:

  ChordService_deleteEntity_args() {
  }

  virtual ~ChordService_deleteEntity_args() throw() {}

  Entity entity;

  _ChordService_deleteEntity_args__isset __isset;

  void __set_entity(const Entity& val) {
    entity = val;
  }

  bool operator == (const ChordService_deleteEntity_args & rhs) const
  {
    if (!(entity == rhs.entity))
      return false;
    return true;
  }
  bool operator != (const ChordService_deleteEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_deleteEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChordService_deleteEntity_pargs {
 public:


  virtual ~ChordService_deleteEntity_pargs() throw() {}

  const Entity* entity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_deleteEntity_result__isset {
  _ChordService_deleteEntity_result__isset() : ce(false) {}
  bool ce;
} _ChordService_deleteEntity_result__isset;

class ChordService_deleteEntity_result {
 public:

  ChordService_deleteEntity_result() {
  }

  virtual ~ChordService_deleteEntity_result() throw() {}

  ChordException ce;

  _ChordService_deleteEntity_result__isset __isset;

  void __set_ce(const ChordException& val) {
    ce = val;
  }

  bool operator == (const ChordService_deleteEntity_result & rhs) const
  {
    if (!(ce == rhs.ce))
      return false;
    return true;
  }
  bool operator != (const ChordService_deleteEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_deleteEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_deleteEntity_presult__isset {
  _ChordService_deleteEntity_presult__isset() : ce(false) {}
  bool ce;
} _ChordService_deleteEntity_presult__isset;

class ChordService_deleteEntity_presult {
 public:


  virtual ~ChordService_deleteEntity_presult() throw() {}

  ChordException ce;

  _ChordService_deleteEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChordService_ping_args {
 public:

  ChordService_ping_args() {
  }

  virtual ~ChordService_ping_args() throw() {}


  bool operator == (const ChordService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChordService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChordService_ping_pargs {
 public:


  virtual ~ChordService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_ping_result__isset {
  _ChordService_ping_result__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_ping_result__isset;

class ChordService_ping_result {
 public:

  ChordService_ping_result() {
  }

  virtual ~ChordService_ping_result() throw() {}

  Node success;
  ChordException ce;

  _ChordService_ping_result__isset __isset;

  void __set_success(const Node& val) {
    success = val;
  }

  void __set_ce(const ChordException& val) {
    ce = val;
  }

  bool operator == (const ChordService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ce == rhs.ce))
      return false;
    return true;
  }
  bool operator != (const ChordService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_ping_presult__isset {
  _ChordService_ping_presult__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_ping_presult__isset;

class ChordService_ping_presult {
 public:


  virtual ~ChordService_ping_presult() throw() {}

  Node* success;
  ChordException ce;

  _ChordService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChordService_notify_args__isset {
  _ChordService_notify_args__isset() : newNode(false) {}
  bool newNode;
} _ChordService_notify_args__isset;

class ChordService_notify_args {
 public:

  ChordService_notify_args() {
  }

  virtual ~ChordService_notify_args() throw() {}

  Node newNode;

  _ChordService_notify_args__isset __isset;

  void __set_newNode(const Node& val) {
    newNode = val;
  }

  bool operator == (const ChordService_notify_args & rhs) const
  {
    if (!(newNode == rhs.newNode))
      return false;
    return true;
  }
  bool operator != (const ChordService_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChordService_notify_pargs {
 public:


  virtual ~ChordService_notify_pargs() throw() {}

  const Node* newNode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_notify_result__isset {
  _ChordService_notify_result__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_notify_result__isset;

class ChordService_notify_result {
 public:

  ChordService_notify_result() {
  }

  virtual ~ChordService_notify_result() throw() {}

  Node success;
  ChordException ce;

  _ChordService_notify_result__isset __isset;

  void __set_success(const Node& val) {
    success = val;
  }

  void __set_ce(const ChordException& val) {
    ce = val;
  }

  bool operator == (const ChordService_notify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ce == rhs.ce))
      return false;
    return true;
  }
  bool operator != (const ChordService_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_notify_presult__isset {
  _ChordService_notify_presult__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_notify_presult__isset;

class ChordService_notify_presult {
 public:


  virtual ~ChordService_notify_presult() throw() {}

  Node* success;
  ChordException ce;

  _ChordService_notify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChordService_getSuccessor_args__isset {
  _ChordService_getSuccessor_args__isset() : id(false) {}
  bool id;
} _ChordService_getSuccessor_args__isset;

class ChordService_getSuccessor_args {
 public:

  ChordService_getSuccessor_args() : id(0) {
  }

  virtual ~ChordService_getSuccessor_args() throw() {}

  int64_t id;

  _ChordService_getSuccessor_args__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  bool operator == (const ChordService_getSuccessor_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ChordService_getSuccessor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_getSuccessor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChordService_getSuccessor_pargs {
 public:


  virtual ~ChordService_getSuccessor_pargs() throw() {}

  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_getSuccessor_result__isset {
  _ChordService_getSuccessor_result__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_getSuccessor_result__isset;

class ChordService_getSuccessor_result {
 public:

  ChordService_getSuccessor_result() {
  }

  virtual ~ChordService_getSuccessor_result() throw() {}

  GetSuccessorResponse success;
  ChordException ce;

  _ChordService_getSuccessor_result__isset __isset;

  void __set_success(const GetSuccessorResponse& val) {
    success = val;
  }

  void __set_ce(const ChordException& val) {
    ce = val;
  }

  bool operator == (const ChordService_getSuccessor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ce == rhs.ce))
      return false;
    return true;
  }
  bool operator != (const ChordService_getSuccessor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_getSuccessor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_getSuccessor_presult__isset {
  _ChordService_getSuccessor_presult__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_getSuccessor_presult__isset;

class ChordService_getSuccessor_presult {
 public:


  virtual ~ChordService_getSuccessor_presult() throw() {}

  GetSuccessorResponse* success;
  ChordException ce;

  _ChordService_getSuccessor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChordService_getConfiguration_args {
 public:

  ChordService_getConfiguration_args() {
  }

  virtual ~ChordService_getConfiguration_args() throw() {}


  bool operator == (const ChordService_getConfiguration_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChordService_getConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_getConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChordService_getConfiguration_pargs {
 public:


  virtual ~ChordService_getConfiguration_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_getConfiguration_result__isset {
  _ChordService_getConfiguration_result__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_getConfiguration_result__isset;

class ChordService_getConfiguration_result {
 public:

  ChordService_getConfiguration_result() {
  }

  virtual ~ChordService_getConfiguration_result() throw() {}

  GetConfigurationResponse success;
  ChordException ce;

  _ChordService_getConfiguration_result__isset __isset;

  void __set_success(const GetConfigurationResponse& val) {
    success = val;
  }

  void __set_ce(const ChordException& val) {
    ce = val;
  }

  bool operator == (const ChordService_getConfiguration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ce == rhs.ce))
      return false;
    return true;
  }
  bool operator != (const ChordService_getConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_getConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_getConfiguration_presult__isset {
  _ChordService_getConfiguration_presult__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_getConfiguration_presult__isset;

class ChordService_getConfiguration_presult {
 public:


  virtual ~ChordService_getConfiguration_presult() throw() {}

  GetConfigurationResponse* success;
  ChordException ce;

  _ChordService_getConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChordService_getFingerTable_args {
 public:

  ChordService_getFingerTable_args() {
  }

  virtual ~ChordService_getFingerTable_args() throw() {}


  bool operator == (const ChordService_getFingerTable_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChordService_getFingerTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_getFingerTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChordService_getFingerTable_pargs {
 public:


  virtual ~ChordService_getFingerTable_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_getFingerTable_result__isset {
  _ChordService_getFingerTable_result__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_getFingerTable_result__isset;

class ChordService_getFingerTable_result {
 public:

  ChordService_getFingerTable_result() {
  }

  virtual ~ChordService_getFingerTable_result() throw() {}

  std::vector<Node>  success;
  ChordException ce;

  _ChordService_getFingerTable_result__isset __isset;

  void __set_success(const std::vector<Node> & val) {
    success = val;
  }

  void __set_ce(const ChordException& val) {
    ce = val;
  }

  bool operator == (const ChordService_getFingerTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ce == rhs.ce))
      return false;
    return true;
  }
  bool operator != (const ChordService_getFingerTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChordService_getFingerTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChordService_getFingerTable_presult__isset {
  _ChordService_getFingerTable_presult__isset() : success(false), ce(false) {}
  bool success;
  bool ce;
} _ChordService_getFingerTable_presult__isset;

class ChordService_getFingerTable_presult {
 public:


  virtual ~ChordService_getFingerTable_presult() throw() {}

  std::vector<Node> * success;
  ChordException ce;

  _ChordService_getFingerTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChordServiceClient : virtual public ChordServiceIf {
 public:
  ChordServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ChordServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void putEntity(const Entity& entity);
  void send_putEntity(const Entity& entity);
  void recv_putEntity();
  void getEntity(Entity& _return, const Entity& entity);
  void send_getEntity(const Entity& entity);
  void recv_getEntity(Entity& _return);
  void deleteEntity(const Entity& entity);
  void send_deleteEntity(const Entity& entity);
  void recv_deleteEntity();
  void ping(Node& _return);
  void send_ping();
  void recv_ping(Node& _return);
  void notify(Node& _return, const Node& newNode);
  void send_notify(const Node& newNode);
  void recv_notify(Node& _return);
  void getSuccessor(GetSuccessorResponse& _return, const int64_t id);
  void send_getSuccessor(const int64_t id);
  void recv_getSuccessor(GetSuccessorResponse& _return);
  void getConfiguration(GetConfigurationResponse& _return);
  void send_getConfiguration();
  void recv_getConfiguration(GetConfigurationResponse& _return);
  void getFingerTable(std::vector<Node> & _return);
  void send_getFingerTable();
  void recv_getFingerTable(std::vector<Node> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChordServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ChordServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChordServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_putEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSuccessor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFingerTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChordServiceProcessor(boost::shared_ptr<ChordServiceIf> iface) :
    iface_(iface) {
    processMap_["putEntity"] = &ChordServiceProcessor::process_putEntity;
    processMap_["getEntity"] = &ChordServiceProcessor::process_getEntity;
    processMap_["deleteEntity"] = &ChordServiceProcessor::process_deleteEntity;
    processMap_["ping"] = &ChordServiceProcessor::process_ping;
    processMap_["notify"] = &ChordServiceProcessor::process_notify;
    processMap_["getSuccessor"] = &ChordServiceProcessor::process_getSuccessor;
    processMap_["getConfiguration"] = &ChordServiceProcessor::process_getConfiguration;
    processMap_["getFingerTable"] = &ChordServiceProcessor::process_getFingerTable;
  }

  virtual ~ChordServiceProcessor() {}
};

class ChordServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChordServiceProcessorFactory(const ::boost::shared_ptr< ChordServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChordServiceIfFactory > handlerFactory_;
};

class ChordServiceMultiface : virtual public ChordServiceIf {
 public:
  ChordServiceMultiface(std::vector<boost::shared_ptr<ChordServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChordServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChordServiceIf> > ifaces_;
  ChordServiceMultiface() {}
  void add(boost::shared_ptr<ChordServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void putEntity(const Entity& entity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putEntity(entity);
    }
    ifaces_[i]->putEntity(entity);
  }

  void getEntity(Entity& _return, const Entity& entity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEntity(_return, entity);
    }
    ifaces_[i]->getEntity(_return, entity);
    return;
  }

  void deleteEntity(const Entity& entity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteEntity(entity);
    }
    ifaces_[i]->deleteEntity(entity);
  }

  void ping(Node& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void notify(Node& _return, const Node& newNode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notify(_return, newNode);
    }
    ifaces_[i]->notify(_return, newNode);
    return;
  }

  void getSuccessor(GetSuccessorResponse& _return, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSuccessor(_return, id);
    }
    ifaces_[i]->getSuccessor(_return, id);
    return;
  }

  void getConfiguration(GetConfigurationResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getConfiguration(_return);
    }
    ifaces_[i]->getConfiguration(_return);
    return;
  }

  void getFingerTable(std::vector<Node> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFingerTable(_return);
    }
    ifaces_[i]->getFingerTable(_return);
    return;
  }

};

}} // namespace

#endif
